language: c
cache: ccache
dist: bionic
branches:
  except:
    - /^(wip\/)?(appveyor|msvc|mingw|windows)(\-.+)?$/

addons:
  apt:
    update: true
    packages:
    - cmake
env:
  global:
  - BUILD_TYPE="Coverage"
  - ARCH_FLAGS="-march=native"

jobs:
  include:
  - name: "gcc amd64"
    compiler: gcc
    arch: amd64

  - name: "clang amd64"
    arch: amd64
    compiler: clang

  # - name: "clang-9"
  #   compiler: clang-9
  #   env:
  #   - C_COMPILER=clang-9
  #   - CXX_COMPILER=clang++-9
  #   - COMPILER_FLAGS='-fsanitize=address,undefined'
  #   addons:
  #     apt:
  #       sources:
  #         sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
  #         key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
  #       packages:
  #       - clang-9

  - name: "gcc-8 i686"
    arch: amd64
    compiler: gcc-8
    env:
    - C_COMPILER=gcc-8
    - CXX_COMPILER=g++-8
    - ARCH_FLAGS="-march=i686"
    addons:
      apt:
        packages:
        - libc6:i386
        - libc6-dev:i386
        - gcc-8:i386
        - g++-8:i386
        - cpp-8:i386
        - binutils:i386
        - binutils-i686-linux-gnu:i386

  - name: "aarch64"
    arch: arm64

  - name: "ppc64le"
    arch: ppc64le
    env:
    - ARCH_FLAGS="-mcpu=native"
    addons:
      apt:
        packages:
        - gcc
        - g++

  - name: "-DSIMDE_NO_SHUFFLE_VECTOR"
    env:
    - COMPILER_FLAGS=-DSIMDE_NO_SHUFFLE_VECTOR

  - name: "pgcc"
    env:
    - C_COMPILER=pgcc
    - CXX_COMPILER=pgc++
    - ARCH_FLAGS="-m64"
    install:
    - curl 'https://raw.githubusercontent.com/nemequ/pgi-travis/master/install-pgi.sh' | /bin/sh

  - name: "xlc"
    arch: ppc64le
    install:
    - wget -q https://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/ubuntu/public.gpg -O- | sudo apt-key add -
    - echo "deb https://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/ubuntu/ ${TRAVIS_DIST} main" >> /etc/apt/sources.list
    - sudo apt-get update
    - export XLC_VERSION="$(apt-cache search '^xlc\.[0-9]+\.[0-9]+\.[0-9]+$' | awk '{ print substr($1, 5) }'"
    - sudo apt-get install "xlc.${XLC_VERSION}" "xlc-license-community.${XLC_VERSION}"
    - sudo /opt/ibm/xlC/${XLC_VERSION}/bin/xlc_configure <<< 1 >/dev/null
    env:
    - C_COMPILER=xlc
    - CXX_COMPILER=xlc++

  - name: s390x
    arch: s390x

  - name: osx
    os: osx

  - name: windows
    os: windows
    env:
    - ARCH_FLAGS=""

  allow_failures:
  - name: xlc
  - name: s390x

before_install:
- cat /proc/cpuinfo || true

## If we use the matrix to set CC/CXX Travis overwrites the values,
## so instead we use C/CXX_COMPILER, then copy the values to CC/CXX
## here (after Travis has set CC/CXX).
- |
  if [ -n "${C_COMPILER}" ]; then
    export CC="${C_COMPILER}"
  fi
  if [ -n "${CXX_COMPILER}" ]; then
    export CXX="${CXX_COMPILER}"
  fi

script:
- mkdir "${TRAVIS_BUILD_DIR}/test/build" && cd "${TRAVIS_BUILD_DIR}/test/build"
- |
  cmake .. \
    -DCMAKE_BUILD_TYPE="${BUILD_TYPE}" \
    -DCMAKE_C_FLAGS="${ARCH_FLAGS} ${COMPILER_FLAGS} ${CFLAGS}" \
    -DCMAKE_CXX_FLAGS="${ARCH_FLAGS} ${COMPILER_FLAGS} ${CXXFLAGS}" \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    ${CMAKE_ARGS}
- cmake --build .
- |
  if [ "windows" != "${TRAVIS_OS_NAME}" ]; then
    ./run-tests
  else
    ctest --output-on-failure --interactive-debug-mode 0 -C Debug -V
  fi

after_success:
- |
  if [ "${BUILD_TYPE}" = "Coverage" ]; then
    bash <(curl -s https://codecov.io/bash) -f '!*test-common.c' ${GCOV}
  fi
